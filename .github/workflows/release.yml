name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v0.1.0)'
        required: true
        type: string
      dry_run:
        description: 'Perform a dry run (no actual release)'
        required: false
        type: boolean
        default: false

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

permissions:
  contents: write

jobs:
  check:
    name: Pre-release Checks
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      
    steps:
    - name: Checkout sources
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Extract version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "Releasing version: ${VERSION}"

    - name: Verify version format
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "Invalid version format: $VERSION"
          echo "Expected format: vX.Y.Z"
          exit 1
        fi

    - name: Check if version matches Cargo.toml
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        CARGO_VERSION="v$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')"
        if [[ "$VERSION" != "$CARGO_VERSION" ]]; then
          echo "Version mismatch:"
          echo "  Tag: $VERSION"
          echo "  Cargo.toml: $CARGO_VERSION"
          exit 1
        fi

    - name: Run full test suite
      run: |
        cargo fmt --all -- --check
        cargo clippy --all-targets --all-features -- -D warnings
        cargo test --all-features --verbose

    - name: Build release
      run: cargo build --release --all-features

  build-release:
    name: Build Release (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    needs: check
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            archive: tar.gz
          - target: x86_64-apple-darwin
            os: macos-latest
            archive: tar.gz
          - target: aarch64-apple-darwin
            os: macos-latest
            archive: tar.gz
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            archive: zip
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            archive: tar.gz
            cross: true

    steps:
    - name: Checkout sources
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.target }}

    - name: Install cross (if needed)
      if: matrix.cross
      run: cargo install cross

    - name: Build release binary
      run: |
        if [[ "${{ matrix.cross }}" == "true" ]]; then
          cross build --release --target ${{ matrix.target }} --features=cpu,polars,csv
        else
          cargo build --release --target ${{ matrix.target }} --features=cpu,polars,csv
        fi

    - name: Create archive
      shell: bash
      run: |
        VERSION="${{ needs.check.outputs.version }}"
        TARGET="${{ matrix.target }}"
        ARCHIVE="lightgbm-rust-${VERSION}-${TARGET}"
        
        mkdir -p "${ARCHIVE}"
        
        # Copy binary
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          cp "target/${TARGET}/release/lightgbm_rust.exe" "${ARCHIVE}/"
        else
          cp "target/${TARGET}/release/lightgbm_rust" "${ARCHIVE}/"
        fi
        
        # Copy documentation and license
        cp README.md LICENSE CHANGELOG.md "${ARCHIVE}/" 2>/dev/null || true
        
        # Create archive
        if [[ "${{ matrix.archive }}" == "zip" ]]; then
          zip -r "${ARCHIVE}.zip" "${ARCHIVE}"
          echo "ASSET=${ARCHIVE}.zip" >> $GITHUB_ENV
        else
          tar czf "${ARCHIVE}.tar.gz" "${ARCHIVE}"
          echo "ASSET=${ARCHIVE}.tar.gz" >> $GITHUB_ENV
        fi

    - name: Upload archive
      uses: actions/upload-artifact@v4
      with:
        name: release-${{ matrix.target }}
        path: ${{ env.ASSET }}
        retention-days: 1

  publish-crates:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: [check, build-release]
    if: github.event.inputs.dry_run != 'true'
    
    steps:
    - name: Checkout sources
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Login to crates.io
      run: cargo login ${{ secrets.CRATES_IO_TOKEN }}

    - name: Publish to crates.io
      run: cargo publish --all-features

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [check, build-release, publish-crates]
    if: always() && needs.check.result == 'success' && needs.build-release.result == 'success'
    
    steps:
    - name: Checkout sources
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Generate changelog
      id: changelog
      run: |
        VERSION="${{ needs.check.outputs.version }}"
        PREV_VERSION=$(git tag --sort=-version:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -2 | tail -1)
        
        echo "Generating changelog from ${PREV_VERSION} to ${VERSION}"
        
        # Create changelog
        cat > RELEASE_NOTES.md << EOF
        # Release ${VERSION}
        
        ## What's Changed
        
        $(git log ${PREV_VERSION}..HEAD --oneline --no-merges | sed 's/^/- /')
        
        ## Performance
        
        See the [benchmark results](https://rust-lightgbm.github.io/lightgbm-rust/benchmarks/) for performance comparisons.
        
        ## Installation
        
        ### From crates.io
        \`\`\`bash
        cargo add lightgbm-rust
        \`\`\`
        
        ### From source
        \`\`\`bash
        git clone https://github.com/rust-lightgbm/lightgbm-rust.git
        cd lightgbm-rust
        cargo build --release
        \`\`\`
        
        ## Full Changelog
        
        **Full Changelog**: https://github.com/rust-lightgbm/lightgbm-rust/compare/${PREV_VERSION}...${VERSION}
        EOF

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ needs.check.outputs.version }}
        name: Release ${{ needs.check.outputs.version }}
        body_path: RELEASE_NOTES.md
        draft: ${{ github.event.inputs.dry_run == 'true' }}
        prerelease: ${{ contains(needs.check.outputs.version, 'alpha') || contains(needs.check.outputs.version, 'beta') || contains(needs.check.outputs.version, 'rc') }}
        files: |
          ./artifacts/release-*/lightgbm-rust-*.tar.gz
          ./artifacts/release-*/lightgbm-rust-*.zip
        generate_release_notes: true

  post-release:
    name: Post-release Tasks
    runs-on: ubuntu-latest
    needs: [check, create-release]
    if: github.event.inputs.dry_run != 'true' && needs.create-release.result == 'success'
    
    steps:
    - name: Checkout sources
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Update version for next development cycle
      run: |
        VERSION="${{ needs.check.outputs.version }}"
        CURRENT_VERSION=$(echo $VERSION | sed 's/v//')
        
        # Increment patch version for next development cycle
        IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
        MAJOR=${VERSION_PARTS[0]}
        MINOR=${VERSION_PARTS[1]}
        PATCH=$((${VERSION_PARTS[2]} + 1))
        
        NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
        
        # Update Cargo.toml
        sed -i "s/^version = \".*\"/version = \"${NEW_VERSION}\"/" Cargo.toml
        
        echo "Updated version to ${NEW_VERSION} for next development cycle"

    - name: Create pull request for version bump
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "chore: bump version for next development cycle"
        title: "chore: bump version for next development cycle"
        body: |
          Automatically bumping version after release ${{ needs.check.outputs.version }}.
          
          This prepares the repository for the next development cycle.
        branch: chore/bump-version
        delete-branch: true

  notify:
    name: Release Notifications
    runs-on: ubuntu-latest
    needs: [check, create-release]
    if: always() && needs.create-release.result == 'success'
    
    steps:
    - name: Notify success
      run: |
        echo "ðŸŽ‰ Successfully released ${{ needs.check.outputs.version }}"
        echo "ðŸ“¦ Published to crates.io: https://crates.io/crates/lightgbm-rust"
        echo "ðŸ“‹ GitHub Release: https://github.com/rust-lightgbm/lightgbm-rust/releases/tag/${{ needs.check.outputs.version }}"