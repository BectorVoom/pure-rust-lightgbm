name: CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        include:
          - os: ubuntu-latest
            rust: nightly
            experimental: true
    continue-on-error: ${{ matrix.experimental || false }}
    
    steps:
    - name: Checkout sources
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.os }}-${{ matrix.rust }}

    - name: Check formatting
      if: matrix.rust == 'stable' && matrix.os == 'ubuntu-latest'
      run: cargo fmt --all -- --check

    - name: Run clippy
      if: matrix.rust == 'stable'
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Build default features
      run: cargo build --verbose

    - name: Build all features
      run: cargo build --all-features --verbose

    - name: Run tests (default features)
      run: cargo test --verbose

    - name: Run tests (all features)
      run: cargo test --all-features --verbose

    - name: Run tests (no default features)
      run: cargo test --no-default-features --verbose

  feature-tests:
    name: Feature Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        features:
          - "cpu"
          - "polars"
          - "csv"
          - "cpu,polars"
          - "cpu,csv"
          - "polars,csv"
          
    steps:
    - name: Checkout sources
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Test features - ${{ matrix.features }}
      run: cargo test --no-default-features --features="${{ matrix.features }}" --verbose

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout sources
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Check documentation
      run: cargo doc --no-deps --all-features
      env:
        RUSTDOCFLAGS: -D warnings

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout sources
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
    - name: Checkout sources
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Install cargo-llvm-cov
      run: cargo install cargo-llvm-cov

    - name: Generate coverage report
      run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: lcov.info
        fail_ci_if_error: true

  check-msrv:
    name: Check MSRV
    runs-on: ubuntu-latest
    steps:
    - name: Checkout sources
      uses: actions/checkout@v4

    - name: Install Rust toolchain (MSRV)
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: 1.75.0

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Check build with MSRV
      run: cargo check --all-features

  check-unused-deps:
    name: Check Unused Dependencies
    runs-on: ubuntu-latest
    steps:
    - name: Checkout sources
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@nightly

    - name: Install cargo-udeps
      run: cargo install cargo-udeps

    - name: Check unused dependencies
      run: cargo +nightly udeps --all-targets

  semver-check:
    name: Semantic Versioning Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout sources
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-semver-checks
      run: cargo install cargo-semver-checks

    - name: Check semantic versioning
      run: cargo semver-checks check-release

  all-checks:
    name: All Checks Complete
    runs-on: ubuntu-latest
    needs: [test, feature-tests, docs, security, coverage, check-msrv]
    if: always()
    steps:
    - name: Check all jobs
      run: |
        if [[ "${{ needs.test.result }}" == "success" && \
              "${{ needs.feature-tests.result }}" == "success" && \
              "${{ needs.docs.result }}" == "success" && \
              "${{ needs.security.result }}" == "success" && \
              "${{ needs.coverage.result }}" == "success" && \
              "${{ needs.check-msrv.result }}" == "success" ]]; then
          echo "All checks passed!"
          exit 0
        else
          echo "Some checks failed!"
          exit 1
        fi